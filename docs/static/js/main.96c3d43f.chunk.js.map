{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA0CeA,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAKnB,EAAoCC,mBAAU,IAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAbW,SAAEC,GACnBA,EAAEC,iBAMEJ,EAAWK,OAAOC,OAAS,GAAIR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAC3EN,EAAc,KAKd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAAEP,GAAF,OAASF,EAAeE,EAAEQ,OAAOF,a,QCXlDG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,sBAAKC,UAAU,2CAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCPJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,0FAE6EO,UAAWF,GAFxF,sBAGAG,MAAOR,GAHP,cAGbS,EAHa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MAEXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAbvB,kBAkBZY,GAlBY,4CAAH,sDC6BLK,EAxBQ,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECJwB,SAAEA,GAE1B,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNjB,EAASC,GACJiB,MAAM,SAAAC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAAEb,IAEEc,EDb2BK,CAAcnB,GAAlCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIjB,UAAU,sCAAd,SAAsDI,IAEpDa,GAAW,mBAAGjB,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEmCtB2B,EAjDM,WAIjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAgBA,OACI,qCACI,8CAEA,cAAC,EAAD,CAEIA,cAAeA,IAGnB,uBASI2C,EAAWb,KAAK,SAACR,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAWA,GADLA,U,MCxC9BsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.96c3d43f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/* const AddCategory = ({ categories, setCategories }) => { */\r\n/* como no hay referencia de categories, hacemos el callback de setcategories para obtenerlas */\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    /* el usestate es undefined si lo dejamos vacio. Entonces inputvalue es undefined y genera errores. */\r\n    /* const [inputValue, setInputValue] = useState(  ); */\r\n    /* por si si se necesita vacio */\r\n    const [inputValue, setInputValue] = useState( '' );\r\n    /* const [inputValue, setInputValue] = useState( 'Add Category' ); */\r\n\r\n    const handleInputChange = ( e ) => setInputValue( e.target.value );\r\n    \r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        /* if( !categories.includes(inputValue) ) {\r\n            setCategories([...categories, inputValue]);\r\n        } */\r\n\r\n        if( inputValue.trim().length > 1 ) setCategories( cats => [ inputValue, ...cats ]);\r\n        setInputValue('');\r\n\r\n    }\r\n\r\n    return ( \r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n \r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInUp\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async( category ) => {\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=OCHO8lvGSN8IGASKNVI9IPfV1hd4QJSp&q=${ encodeURI( category ) }&limit=10`;\r\n    const resp = await fetch( url );\r\n    /* const data = await resp.json(); */\r\n    /* usemos desestructarion */\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            /* signo de interrogacion por si vienen imagenes o no */\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    /* setImages(gifs); */\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInUp\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default GifGrid;","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    /* const categories = ['One Puch', 'Samurai X', 'Dragon Ball']; */\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /* con add button\r\n        const handleAdd = (item) => {\r\n        if( !categories.includes(item) ) {\r\n            setCategories([...categories, item]);\r\n            console.log('added!');\r\n\r\n            \r\n            setCategories( cats => [...cats, item] );\r\n            \r\n        } else {\r\n            console.log('ya existe!');\r\n        }\r\n    } */\r\n\r\n    return ( \r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory \r\n                /* categories={categories} */\r\n                setCategories={setCategories}\r\n            />\r\n            \r\n            <hr />\r\n\r\n            {/* <button onClick={e => handleAdd(e)} >Add</button> */}\r\n            {/* forma simple */}\r\n            {/* <button onClick={() => handleAdd('Full Metal Alchemist')} >Add</button> */}\r\n            \r\n            \r\n            {/* <li key={ category }>{category}</li> */}\r\n            {\r\n                categories.map( (category) => (\r\n                    <GifGrid \r\n                        key={ category } \r\n                        category={ category } \r\n                    />\r\n                ))\r\n            }\r\n        </>\r\n    );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}